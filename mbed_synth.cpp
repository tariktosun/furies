/* ----------------------------------------------------------------------- */
/* The lookup tables are to be read based on the desired frequency by the  */
/* user of the synthesizer (waveFreq). The waveFreq variable will be       */
/* used to create what's known as a frequency tuning word (freqTun). This  */
/* variable inn turn is used to increment the 32-bit phase accumulator     */
/* (phaseAcc) every 40kHz generated by an interrupt.                       */
/* Credit goes to John Luciani for his interrupt-based approach to the DDS */
/* algorithm.                                                              */
/* The calculation of freqTun is as follows:                               */
/*                                                                         */
/*       freqTun = ((waveFreq * SAMP_NUM) * (SHFT_FCTR / SAMP_FREQ))       */
/*                                                                         */
/* In this instance, SAMP_NUM is 256, SAMP_FREQ is 40000 and the shift     */
/* factor (SHFT_FCTR) is determined by setting the least significant bit   */
/* of the lookup address to 1. As the top 8 bits of the phase accumulator  */
/* serve as the lookup address. This means SHFT_FCTR must be equal to      */
/* 0x01000000.                                                             */
/*                                                                         */
/* ----------------------------------------------------------------------- */
#include "mbed_synth.h"

/* Function Definitions */

/**
 * This function adds the frequency tuning word present @ index  the 
 * phase accumulator 
 */

void MbedSynth::acc_inc(void) 
{
  phaseAcc += freqTun;
}

/**
 * This function resets the phase accumulator for the oscillator 
 *  Should be called when switching frequencies.
 */
 
void MbedSynth::acc_reset(void) 
{
  phaseAcc = 0;
}


/**
 * This function calculates the frequency tuning word of the oscillator
 */
void MbedSynth::set_freq_tun(void) 
{
  freqTun = ((((uint32_t)waveFreq) * SAMP_NUM) *
            (SHFT_FCTR / SAMP_FREQ));
}

/**
 * This function sets the frequency of the oscillator. In
 * addition, this function calculates the corresponding frequency tuning word.
 *
 * param: freq - frequency of waveform
 */

void MbedSynth::set_freq(const uint16_t freq) 
{
  acc_reset();
  waveFreq = freq;
  set_freq_tun();
}

/**
 * This function sends the current waveform value for each channel
 * to the appropriate output port. Checks are made to ensure frequency
 * and waveform values are up to date.
 */
void MbedSynth::send_vals(void) 
{
    if (freqChange == TRUE) {
      set_freq(newFreq); // Set new frequency
      freqChange = FALSE; // Reset freqChange
    }
     
    ledPin->write(!ledPin->read()); //debug
    acc_inc(); // Increment phase accumulator
    waveIndex = phaseAcc >> 24; // Get address into wavetable    
    
    if (noteOn == TRUE)
      synthPin->write((waveTable[waveIndex]*vol)/((float)(SAMP_NUM-1)));
}

void MbedSynth::init_synth(void) {
  // Setup initial waveforms
  acc_reset(); // Set all accumulators to 0 initially
  waveTable = sinVals;
  vol=1.0;
  noteOn = TRUE;
  rnd = freqChange = FALSE;
}

MbedSynth::MbedSynth(AnalogOut *Pin,DigitalOut *led ) {
    // Initialize led and analog pin
    synthPin = Pin;
    ledPin = led;
    ledPin->write(1); 
}

