/***************************************************************************/
/* mbed_synth.h                                                            */
/*                                                                         */
/* ----------------------------------------------------------------------- */
/* Author: Ron Grier, Lakshmi Baddam                                       */
/* Target: nxp lpc1768                                                     */
/* Modified : Seethu Christopher                                           */
/* Oct-14-2014                                                             */
/*                                                                         */
/***************************************************************************/
#ifndef MBED_SYNTH_H
#define MBED_SYNTH_H

#include "mbed.h"
#include <stdint.h>

/* Macros */
#define SAMP_FREQ   (40000.0) // Sampling frequency
#define SAMP_NUM    (256) // Number of samples per wavetable
#define SHFT_FCTR   (0x01000000) // Used to shift result of frequency
                                 // tuning word to the top8 bits

/* Typedefs and Enums */
typedef enum _bool {FALSE, TRUE} Bool;

/* Values for Sine Wave */
const uint8_t sinVals[SAMP_NUM] = {
  0x80,0x83,0x86,0x89,0x8c,0x8f,0x92,0x95,
  0x98,0x9c,0x9f,0xa2,0xa5,0xa8,0xab,0xae,
  0xb0,0xb3,0xb6,0xb9,0xbc,0xbf,0xc1,0xc4,
  0xc7,0xc9,0xcc,0xce,0xd1,0xd3,0xd5,0xd8,
  0xda,0xdc,0xde,0xe0,0xe2,0xe4,0xe6,0xe8,
  0xea,0xec,0xed,0xef,0xf0,0xf2,0xf3,0xf5,
  0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfc,
  0xfd,0xfe,0xfe,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xfe,
  0xfd,0xfc,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,
  0xf6,0xf5,0xf3,0xf2,0xf0,0xef,0xed,0xec,
  0xea,0xe8,0xe6,0xe4,0xe2,0xe0,0xde,0xdc,
  0xda,0xd8,0xd5,0xd3,0xd1,0xce,0xcc,0xc9,
  0xc7,0xc4,0xc1,0xbf,0xbc,0xb9,0xb6,0xb3,
  0xb0,0xae,0xab,0xa8,0xa5,0xa2,0x9f,0x9c,
  0x98,0x95,0x92,0x8f,0x8c,0x89,0x86,0x83,
  0x80,0x7c,0x79,0x76,0x73,0x70,0x6d,0x6a,
  0x67,0x63,0x60,0x5d,0x5a,0x57,0x54,0x51,
  0x4f,0x4c,0x49,0x46,0x43,0x40,0x3e,0x3b,
  0x38,0x36,0x33,0x31,0x2e,0x2c,0x2a,0x27,
  0x25,0x23,0x21,0x1f,0x1d,0x1b,0x19,0x17,
  0x15,0x13,0x12,0x10,0x0f,0x0d,0x0c,0x0a,
  0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x03,
  0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,
  0x02,0x03,0x03,0x04,0x05,0x06,0x07,0x08,
  0x09,0x0a,0x0c,0x0d,0x0f,0x10,0x12,0x13,
  0x15,0x17,0x19,0x1b,0x1d,0x1f,0x21,0x23,
  0x25,0x27,0x2a,0x2c,0x2e,0x31,0x33,0x36,
  0x38,0x3b,0x3e,0x40,0x43,0x46,0x49,0x4c,
  0x4f,0x51,0x54,0x57,0x5a,0x5d,0x60,0x63,
  0x67,0x6a,0x6d,0x70,0x73,0x76,0x79,0x7c
};


class MbedSynth { 
public:
    volatile uint16_t waveFreq; // Frequency of waveform
    volatile uint32_t phaseAcc; // Used to store phase accumulators
    volatile uint32_t freqTun; // Frequency tuning words
    volatile uint8_t waveIndex; // Top 8 bits of phase accumulator
    const uint8_t *waveTable; // Ptr to wavetables
    volatile Bool rnd; // Rounding to next sample can reduce SNR
    volatile Bool sendVals; // When to send next value(s) to DAC(s) set by ISR
    
    volatile Bool freqChange; // Whether frequency has changed
    volatile uint16_t newFreq; // New frequency
    volatile Bool noteOn;
    volatile float vol;
    void init_synth(int);
    void acc_inc(void);
    void acc_reset(void);
    //void set_wave(const Wave waveType);
    void set_freq_tun(void);
    void set_freq(const uint16_t freq);
    void send_vals(void);
    void init_synth(void);
    MbedSynth(AnalogOut *Pin,DigitalOut *led);
   
private:
    AnalogOut *synthPin;
    DigitalOut *ledPin;
};

#endif // MBED_SYNTH_H
